# *** Сортировка выбором ***
# Следующее решение «в лоб» — каждый раз искать минимальный элемент и ставить его в начало.
# Звучит уже интереснее.

array = [2, 3, 1, 4, 6, 5, 9, 8, 7]
for i in range(len(array)):
    idx_min = i
    for j in range(i+1, len(array)):
        if array[j] < array[idx_min]:
            idx_min = j
    if i != idx_min:
        array[i], array[idx_min] = array[idx_min], array[i]
print(array)
# На каждом шаге мы имеем отсортированную (слева) и неотсортированную часть (справа).
# Ищется минимальный элемент в неотсортированной части и меняется местами с элементом
# в начале неотсортированной части.
# И так продолжается, пока не закончится внешний цикл.


# Модификация сортировки выбором для сортировки по убыванию.
array = [2, 3, 1, 4, 6, 5, 9, 8, 7]
for i in range(len(array)):
    idx_max = i
    for j in range(i+1, len(array)):
        if array[j] > array[idx_max]:
            idx_max = j
    if i != idx_max:
        array[i], array[idx_max] = array[idx_max], array[i]
print(array)


# *** Сортировка пузырьком ***
# Сортировка пузырьком — самый любимый студентами вид сортировки.
# Его суть сводится к тому, что максимальные элементы шаг за шагом «всплывают» вправо —
# в отсортированную часть массива.
# И по ходу совершаются еще перестановки, если это необходимо,
# ведь каждый раз мы сравниваем только соседние элементы!

array = [2, 3, 1, 4, 6, 5, 9, 8, 7]
for i in range(len(array)):
    for j in range(len(array)-i-1):
        if array[j] > array[j+1]:
            array[j], array[j+1] = array[j+1], array[j]
print(array)
# Алгоритм сортировки как пузырьком, так и выбором, имеет среднюю сложность O(n^2),
# потому что мы имеем два вложенных цикла, каждый из которых, в среднем,
# проходится по половине всего количества элементов.

# Пузырек удобен, когда структура имеет не очень большой размер и очень важна скорость написания кода.
# В таком случае пузырек идеален — два цикла, одно условие и один swap (перестановка двух элементов).
# Однако на более крупных массивах пузырек сильно проигрывает другим алгоритмам.